@page "/ManageOrders/{id:int}"
@using global::Shared.Model
@using global::Shared.Dtos
@using HttpClients.ClientInterfaces
@using System.Reflection.Metadata
@using global::Shared.Dtos.IngredientDto
@inject IOrderService orderService
@inject IItemService itemService
@inject IIngredientService ingredientService 
@inject NavigationManager navMgr

@if (order == null)
{
    <h3>Loading</h3>
    <br/>
    <span>fetching data..</span>
}

else
{
    <div class="post-card">
        <h3>Order: @Id</h3>
        <p>This order has the following items:</p>
        <br/>
        @foreach (var item in order.Items)
        {
            <li>@item.Name</li>
        }
    </div>
    <br/>
    <p class="legal">ordered by: @order.Customer.FirstName @order.Customer.LastName</p>
    <label>Status: </label>   
    <select name ="orderStatus" id="orderStatus" @onchange="SetStatus">
        <option value="ordered">ordered</option>
        <option value="in progress">in progress</option>
        <option value="ready for pickup">ready for pickup</option>
    </select>
    <p>total price: @totalPrice kr</p>
    @foreach (var item in allItems)
    {
        foreach (var ingredient in item.Ingredients)
        {
            <p>@ingredient.Name</p>
        }
    }
    
    @foreach (var item in order.Items)
    {
        <p>@item.Name</p>
    }
    
    

    <br/>
    <br/>
    <div>
        <button @onclick="ConfirmButton">Delete order</button>
        <button @onclick="AddItemButton">Add item(s) to order</button>
        <button @onclick="RemoveItemButton">Remove item(s) from order</button>
    </div>
    if (confirmBool)
    {
        <div>
            <p>Are you sure you want to delete the order?</p>
            <button @onclick="DeleteOrder">Yes</button>
            <button @onclick="ConfirmButton">No</button>
        </div>
    }
    if (addBool)
    {
        <div>
            <label>Select the item to add:</label>
            <select name="addItem" id="addItem" @onchange="SetItemToAdd">
                @foreach (var item in allItems)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </select>
            <button @onclick="AddItem">add to order</button>
        </div>
    }
    if (removeBool)
    {
        <div>
            <label>Select the item to remove:</label>
            <select name="removeItem" id="removeItem" @onchange="SetItemToRemove">

                @foreach (var item in order.Items)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </select>
            <button @onclick="@RemoveItem">remove from order</button>
        </div>
    }
    <p>@msg</p>
}

@code {
    [Parameter] 
    public int Id { get; set; }

    private bool confirmBool;
    private bool addBool;
    private bool removeBool;
    private string status;
    private OrderFullInfoDto order;
    private OrderUpdateDto updateDto = null!;
    private ICollection<Item> allItems;
    private ICollection<ItemBasicDto> orderItems;
    private Item itemToAdd;
    private Item itemToRemove;
    private double totalPrice;
    private string msg = "";
    private string error = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            Console.WriteLine("about to fetch");
            order = await orderService.GetOrderByIdAsync(Id);
            var fetchedItems = await itemService.GetAsync(null);
            allItems = fetchedItems.OrderBy(i => i.Name).ToList();
            status = order.Status;
            foreach (var item in order.Items)
            {
                orderItems.Add(await itemService.GetByIdAsync(item.Id));
            }
            UpdateTotalPrice();
            if (allItems.Count!=0)
            {
                itemToAdd = allItems.FirstOrDefault();

            }
            itemToRemove = order.Items.FirstOrDefault();
            updateDto = new(Id)
            {
                Items = allItems,
                Status = order.Status,
                CustomerName = order.Customer.UserName
            };
            Console.WriteLine("fetched the order!");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void RefreshOrder()
    {
        
    }

    private async void UpdateTotalPrice()
    {
        totalPrice = 0;
        var itemsInOrder = order.Items;
        Console.WriteLine(itemsInOrder.Count);
        foreach (var item in itemsInOrder)
        {
            Console.WriteLine(item.Name + item.Price);
            totalPrice += item.Price;
        }
    }

    private void SetStatus(ChangeEventArgs e)
    {
        string selectedValue = e.Value.ToString();
        status = selectedValue;
        if (status.Equals("ready for pickup"))
        {
            UpdateStorageAmounts();
        }
    }

    private async void UpdateStorageAmounts()
    {
        Console.WriteLine("start of method");
        int amount = 0;
        foreach (var item in orderItems)
        {
            Console.WriteLine("first part of loop");
            var ingredientList = item.Ingredients.ToList();
            for (int i = 0;i< ingredientList.Count;i++)
            {
                Console.WriteLine("we got into the loop");
                amount = ingredientList[i].Amount;
                await ingredientService.UpdateIngredientAmount(new IngredientUpdateDto(ingredientList[i].Id, amount));
            }
        }
    }

    private void SetItemToAdd(ChangeEventArgs e)
    {
        int selectedValue = int.Parse(e.Value.ToString());
        itemToAdd = allItems.FirstOrDefault(item => item.Id == selectedValue);
    }

    private void SetItemToRemove(ChangeEventArgs e)
    {
        int selectedValue = int.Parse(e.Value.ToString());
        itemToRemove = order.Items.FirstOrDefault(item => item.Id == selectedValue);
    }

    private void ConfirmButton()
    {
        addBool = false;
        removeBool = false;
        if (confirmBool)
        {
            confirmBool = false;
        }
        else
        {
            confirmBool = true;
        }
    }

    private void AddItemButton()
    {
        confirmBool = false;
        removeBool = false;
        if (addBool)
        {
            addBool = false;
        }
        else
        {
            addBool = true;
        }
    }

    private void RemoveItemButton()
    {
        confirmBool = false;
        addBool = false;
        if (removeBool)
        {
            removeBool = false;
        }
        else
        {
            removeBool = true;
        }
    }
    
    private async Task DeleteOrder()
    {
        
        msg = "";
        try
        {
            await orderService.DeleteAsync(Id);
            navMgr.NavigateTo($"/ViewOrders");
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task AddItem()
    {
        msg = "";
        try
        {
            order.Items.Add(itemToAdd);
            UpdateTotalPrice();
            await orderService.UpdateAsync(updateDto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task RemoveItem()
    {
        msg = "";
        try
        {
            order.Items.Remove(itemToRemove);
            UpdateTotalPrice();
            await orderService.UpdateAsync(updateDto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}