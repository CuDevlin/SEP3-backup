@page "/EditOrder"
@using HttpClients.ClientInterfaces
@using global::Shared.Model
@using BlazorApp.Services
@using System.Security.Claims
@inject IOrderService orderService
@inject IAuthService authService;

<h3>Your Orders</h3>

@if (orders == null)
{
}
else if (!orders.Any())
{
    <p>No Orders to display</p>
}
else
{
    <table class="table">
        <thead>
        <th>ID</th>
        <th>Date</th>
        <th>Status</th>
        <th>Cancel</th>
        </thead>
        <tbody>
        @foreach (var order in orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.Date</td>
                <td>@order.Status</td>
                <td>
                    <img src="img/delete.png" class="delete" @onclick="() => CancelOrder(order.Id)"/>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;
    private IEnumerable<Order>? orders;
    
    private string username;
    private string msg = "";
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthState;
            var user = authState.User;
            
            userClaims = user.Claims;
            foreach (var claim in userClaims!)
            {
                if (claim.Type.Equals("Username"))
                    username = claim.Value;
            }
            
            orders = await orderService.GetOrdersByCustomerUsername(username);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task CancelOrder(int id)
    {
        msg = "";
        try
        {
            
            await orderService.DeleteAsync(id);
        
            var list = new List<Order>(orders!);
            list.RemoveAll(i => i.Id == id);
            orders = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}