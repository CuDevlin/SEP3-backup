@page "/SeeItems"
@using global::Shared.Model
@using HttpClients.ClientInterfaces
@using global::Shared.Dtos
@using global::Shared.Dtos.IngredientDto
@inject IItemService itemService;
@inject IIngredientService ingredientService;
@inject NavigationManager navMgr

<h3>See Items</h3>

<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Name:</label>
                <input type="text" @bind="_nameFilter"/>
            </div>
        }
    </div>
</div>

<div>
    <button @onclick="LoadItems">Load</button>
</div>


@if (items == null)
{
}
else if (!items.Any())
{
    <p>No Posts to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Item ID</th>
            <th>Name</th>
            <th>Price</th>
            <th>Edit</th>
            <th>View</th>
            <th>Delete?</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in items)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.Price</td>
                <td>
                    <img src="icons/view.png" class="funnel" @onclick="@(() => navMgr.NavigateTo($"/ViewItemDetails/{item.Id}"))"/>
                    </td>
                
                <td>
                    <label @onclick="@(() => RemoveItem(item.Id))" style="cursor:pointer; color: red; font-weight: bold">
                        &#x2717;
                    </label>
                    </td>
                
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}


<br/>
<br/>

<h3>Add Item</h3>
@if (_ingredients == null)
{
}
else if (!_ingredients.Any())
{
    <p>No Items to display</p>
}
else
{
    
            <div class="form-group field">
                <label>Name:</label>
                <textarea rows="1" cols="15" @bind="newItemName"/>
            </div>
            <div class="form-group field">
                <label>Price:</label>
                <textarea rows="1" cols="5" @bind="newPrice" />
            </div>
            <label>Ingredients:</label>
            <select name="addItem" id="addItem" @onchange="SetIngredientToAdd">
                <option>Choose:</option>
                @foreach (Ingredient ingredient in _ingredients)
                {
                    <option value="@ingredient.Id">@ingredient.Name</option>

                }
            </select>
            <button @onclick="AddIngredient">add ingredient</button>
            
            <h5>Selected Items</h5>
            
            @if (newIngredients.Count>0)
            {
                <table class="table">
                    <thead>
                    <tr>
                        <th>Ingredient Name</th>
                        <th>Item Allergen</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var i in _ingredients)
                    {
                        foreach (var j in newIngredients)
                        {
                            if(i.Id==j){
                                
                                <tr>
                                    <td>@i.Name</td>
                                    <td>@i.Allergen</td>
                                </tr>

                        }
                        

                               
                            
                        }
                        
                       
                    }
                    </tbody>
                </table>
            }
           
        

            <div class="button-row">
                @if (!string.IsNullOrEmpty(msg))
                {
                    <label style="color: red">@msg</label>
                }
                <button @onclick="CreateItem" class="acceptbtn">Create</button>
            </div>
            
        
    
}

@code {
   
    private IEnumerable<Item>? items=new List<Item>();
    private IEnumerable<Ingredient>? _ingredients=new List<Ingredient>();
    //private List<Ingredient> selectedIngredient=new List<Ingredient>();
    private IngredientBasicDto ingdto = null!;
   
  
    private string msg = "";
    private bool doShowFilters = false;
    private static string newItemName ="";
    private static  int newPrice;
    private List<int> newIngredients=new List<int>();
    private bool addBool;
    private Ingredient ingredientToAdd;
    private ItemBasicDto dto = new ItemBasicDto(newItemName, newPrice, new List<Ingredient>());
  

    private string? _nameFilter;
   
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _ingredients = await ingredientService.getAllIngredientsAsync(null);

            items = await itemService.GetAsync(null);
            


        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    
    
     private async Task LoadItems()
    {
         try
        {
            items = await itemService.GetAsync(_nameFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task CreateItem()
    {
        msg = "";
        if (dto.Ingredients == null )
        {
            msg = "You must select an ingredient!";
            return;
        }
        if (string.IsNullOrEmpty(newItemName))
        {
            msg = "Name cannot be empty!";
            return;
        }
        if (newPrice==null)
        {
            msg = "Price cannot be empty!";
            return;
        }
        
        try
        {
            
           
            
            ItemCreationDto creationDto = new(newItemName,newPrice,newIngredients);
            await itemService.CreateAsync(creationDto);
            //ingredients = await ingredientService.getAllIngredientsAsync(Name);
            msg = "Item created";

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }


    private void SetIngredientToAdd(ChangeEventArgs e)
    {
        int selectedValue = int.Parse(e.Value.ToString());
        ingredientToAdd = _ingredients.FirstOrDefault(i => i.Id == selectedValue);
    }
    
    private async Task AddIngredient()
    {
        try
        {
            newIngredients.Add(ingredientToAdd.Id);
            //dto.Ingredients.Add(ingredientToAdd);
            msg = "Ingredient added";
            

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
     
     
     
    /*
     
     private async Task LoadTodos()
    {
        try
        {
            todos = await todoService.GetAsync(null, null, null, null);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    private async Task CompleteTodo(Post item, bool status)
    {
        PostUpdateDto dto = new(item.Id)
        {
            IsCompleted = status
        };
    
        try
        {
            await todoService.UpdateAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }*/ 
    private async Task RemoveItem(int id)
    {
        msg = "";
        try
        {
            await itemService.DeleteAsync(id);
        
            var list = new List<Item>(items!);
            list.RemoveAll(todo => todo.Id == id);
            items = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
}

